name: Build

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Tag version to release'
        required: false
  push:
    branches:
      - master
      - main
    tags:
      - v*
    paths-ignore:
      - 'README.md'
      - 'README.zh-CN.md'
      - '.github/ISSUE_TEMPLATE/**'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Static CGO
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            goamd64: v3
            cgo: true
            static: true
            output: payload-dumper-linux-amd64-v3-cgo-static
          - os: ubuntu-24.04-arm
            goos: linux
            goarch: arm64
            cgo: true
            static: true
            output: payload-dumper-linux-arm64-cgo-static
          - os: macos-13
            goos: darwin
            goarch: amd64
            goamd64: v3
            cgo: true
            static: true
            output: payload-dumper-darwin-amd64-v3-cgo-static
          - os: macos-latest
            goos: darwin
            goarch: arm64
            cgo: true
            static: true
            output: payload-dumper-darwin-arm64-cgo-static

          # Dynamic CGO
          - os: macos-13
            goos: darwin
            goarch: amd64
            goamd64: v3
            cgo: true
            output: payload-dumper-darwin-amd64-v3-cgo-brew
          - os: macos-latest
            goos: darwin
            goarch: arm64
            cgo: true
            output: payload-dumper-darwin-arm64-cgo-brew
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            goamd64: v3
            cgo: true
            output: payload-dumper-linux-amd64-v3-cgo-gcc
          - os: ubuntu-24.04-arm
            goos: linux
            goarch: arm64
            cgo: true
            output: payload-dumper-linux-arm64-cgo-gcc

          # Pure Go version only (no CGO dependencies)
          - os: ubuntu-latest
            goos: windows
            goarch: amd64
            goamd64: v3
            cgo: false
            output: payload-dumper-windows-amd64-v3
          - os: ubuntu-latest
            goos: windows
            goarch: arm64
            cgo: false
            output: payload-dumper-windows-arm64
          - os: ubuntu-latest
            goos: darwin
            goarch: amd64
            goamd64: v3
            cgo: false
            output: payload-dumper-darwin-amd64-v3
          - os: ubuntu-latest
            goos: darwin
            goarch: arm64
            cgo: false
            output: payload-dumper-darwin-arm64
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            goamd64: v3
            cgo: false
            output: payload-dumper-linux-amd64-v3
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            cgo: false
            output: payload-dumper-linux-arm64
          - os: ubuntu-latest
            goos: android
            goarch: arm64
            cgo: false
            output: payload-dumper-android-arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update built-in CA certificates
        run: |
          curl -L -o common/file/ca-certificates.crt https://curl.se/ca/cacert.pem

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Set Environment Variables
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          if [ -z "${VERSION}" ]; then
            VERSION="dev"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "BUILDTIME=$(date)" >> $GITHUB_ENV

      - name: Install Linux dependencies for CGO
        if: matrix.goos == 'linux' && matrix.cgo == true
        run: |
          sudo apt-get update
          sudo apt-get install -y liblzma-dev pkg-config
          # For static builds, also install static libraries
          if [[ "${{ matrix.static }}" == "true" ]]; then
            sudo apt-get install -y liblzma-dev:$(dpkg --print-architecture) musl-dev
          fi

      - name: Build CGO version (Linux)
        if: matrix.cgo == true && matrix.goos == 'linux'
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOAMD64: ${{ matrix.goamd64 }}
          CGO_ENABLED: 1
        shell: bash
        run: |
          if [[ "${{ matrix.static }}" == "true" ]]; then
            CGO_CFLAGS="$(pkg-config --cflags liblzma)" \
            CGO_LDFLAGS="$(pkg-config --libs --static liblzma)" \
            go build -a \
              -ldflags="-linkmode external -extldflags '-static' -s -w -X 'github.com/xishang0128/payload-dumper-go/constant.Version=${VERSION}' -X 'github.com/xishang0128/payload-dumper-go/constant.BuildTime=${BUILDTIME}'" \
              -o bin/${{ matrix.output }} \
              ./cmd/payload-dumper
          else
            go build \
              -ldflags="-s -w -X 'github.com/xishang0128/payload-dumper-go/constant.Version=${VERSION}' -X 'github.com/xishang0128/payload-dumper-go/constant.BuildTime=${BUILDTIME}'" \
              -o bin/${{ matrix.output }} ./cmd/payload-dumper
          fi

      - name: Build CGO version (Darwin)
        if: matrix.goos == 'darwin' && matrix.cgo == true
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOAMD64: ${{ matrix.goamd64 }}
          CGO_ENABLED: 1
        shell: bash
        run: |
          if [[ "${{ matrix.static }}" == "true" ]]; then
            if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
              CGO_CFLAGS="-I/opt/homebrew/opt/xz/include" \
              CGO_LDFLAGS="/opt/homebrew/opt/xz/lib/liblzma.a" \
              go build \
                -a -ldflags="-s -w -X 'github.com/xishang0128/payload-dumper-go/constant.Version=${VERSION}' -X 'github.com/xishang0128/payload-dumper-go/constant.BuildTime=${BUILDTIME}'" \
                -o bin/${{ matrix.output }} ./cmd/payload-dumper
            else 
              CGO_CFLAGS="-I/usr/local/opt/xz/include" \
              CGO_LDFLAGS="/usr/local/opt/xz/lib/liblzma.a" \
              go build \
                -a -ldflags="-s -w -X 'github.com/xishang0128/payload-dumper-go/constant.Version=${VERSION}' -X 'github.com/xishang0128/payload-dumper-go/constant.BuildTime=${BUILDTIME}'" \
                -o bin/${{ matrix.output }} ./cmd/payload-dumper
            fi
          else
            CGO_CFLAGS="-I/opt/homebrew/opt/xz/include" \
            CGO_LDFLAGS="-L/opt/homebrew/opt/xz/lib" \
            go build \
              -ldflags="-s -w -X 'github.com/xishang0128/payload-dumper-go/constant.Version=${VERSION}' -X 'github.com/xishang0128/payload-dumper-go/constant.BuildTime=${BUILDTIME}'" \
              -o bin/${{ matrix.output }} ./cmd/payload-dumper
          fi

      - name: Build Pure Go version
        if: matrix.cgo == false
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOAMD64: ${{ matrix.goamd64 }}
          CGO_ENABLED: 0
        shell: bash
        run: |
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            go build \
              -ldflags="-s -w -X 'github.com/xishang0128/payload-dumper-go/constant.Version=${VERSION}' -X 'github.com/xishang0128/payload-dumper-go/constant.BuildTime=${BUILDTIME}'" \
              -o bin/${{ matrix.output }}.exe ./cmd/payload-dumper
          else
            go build \
              -ldflags="-s -w -X 'github.com/xishang0128/payload-dumper-go/constant.Version=${VERSION}' -X 'github.com/xishang0128/payload-dumper-go/constant.BuildTime=${BUILDTIME}'" \
              -o bin/${{ matrix.output }} ./cmd/payload-dumper
          fi

      - name: Create archive (Windows)
        if: matrix.goos == 'windows'
        shell: bash
        run: |
          cd bin
          7z a ${{ matrix.output }}.zip ${{ matrix.output }}.exe

      - name: Create archive (Unix)
        if: matrix.goos != 'windows'
        shell: bash
        run: |
          cd bin
          tar -czf ${{ matrix.output }}.tar.gz ${{ matrix.output }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.output }}
          path: |
            bin/*.zip
            bin/*.tar.gz
          retention-days: 30

  release:
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: bin/
          merge-multiple: true

      - name: Create Release
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            bin/*.zip
            bin/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pre-release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: bin/
          merge-multiple: true

      - name: Delete current release assets
        uses: 8Mi-Tech/delete-release-assets-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: pre-release
          deleteOnlyFromDrafts: false

      - name: Tag Repo
        uses: richardsimko/update-tag@v1
        with:
          tag_name: pre-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: pre-release
          files: |
            bin/*.zip
            bin/*.tar.gz
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}