name: Build

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Tag version to release'
        required: false
  push:
    branches:
      - master
      - main
    tags:
      - v*
    paths-ignore:
      - 'README.md'
      - 'README.zh-CN.md'
      - '.github/ISSUE_TEMPLATE/**'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Static CGO
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            goamd64: v3
            cgo: true
            static: true
            output: payload-dumper-linux-amd64-v3-cgo-static
          - os: ubuntu-24.04-arm
            goos: linux
            goarch: arm64
            cgo: true
            static: true
            output: payload-dumper-linux-arm64-cgo-static
          - os: macos-13
            goos: darwin
            goarch: amd64
            goamd64: v3
            cgo: true
            static: true
            output: payload-dumper-darwin-amd64-v3-cgo-static
          - os: macos-latest
            goos: darwin
            goarch: arm64
            cgo: true
            static: true
            output: payload-dumper-darwin-arm64-cgo-static
          - os: windows-latest
            goos: windows
            goarch: amd64
            goamd64: v3
            cgo: true
            static: true
            compiler: mingw
            output: payload-dumper-windows-amd64-v3-cgo-static-mingw
          - os: windows-11-arm
            goos: windows
            goarch: arm64
            cgo: true
            static: true
            compiler: mingw
            output: payload-dumper-windows-arm64-cgo-static-mingw

          # Dynamic CGO
          - os: macos-13
            goos: darwin
            goarch: amd64
            goamd64: v3
            cgo: true
            output: payload-dumper-darwin-amd64-v3-cgo-brew
          - os: macos-latest
            goos: darwin
            goarch: arm64
            cgo: true
            output: payload-dumper-darwin-arm64-cgo-brew
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            goamd64: v3
            cgo: true
            output: payload-dumper-linux-amd64-v3-cgo-gcc
          - os: ubuntu-24.04-arm
            goos: linux
            goarch: arm64
            cgo: true
            output: payload-dumper-linux-arm64-cgo-gcc
          - os: ubuntu-latest
            goos: android
            goarch: arm64
            cgo: true
            output: payload-dumper-android-arm64-cgo-termux

          # Pure Go version only (no CGO dependencies)
          - os: ubuntu-latest
            goos: windows
            goarch: amd64
            goamd64: v3
            cgo: false
            output: payload-dumper-windows-amd64-v3
          - os: ubuntu-latest
            goos: windows
            goarch: arm64
            cgo: false
            output: payload-dumper-windows-arm64
          - os: ubuntu-latest
            goos: darwin
            goarch: amd64
            goamd64: v3
            cgo: false
            output: payload-dumper-darwin-amd64-v3
          - os: ubuntu-latest
            goos: darwin
            goarch: arm64
            cgo: false
            output: payload-dumper-darwin-arm64
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            goamd64: v3
            cgo: false
            output: payload-dumper-linux-amd64-v3
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            cgo: false
            output: payload-dumper-linux-arm64
          - os: ubuntu-latest
            goos: android
            goarch: arm64
            cgo: false
            output: payload-dumper-android-arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Checkout compression-libs
        if: matrix.goos == 'android' && matrix.cgo == true
        uses: actions/checkout@v4
        with:
          repository: xishang0128/compression-android-arm64
          path: compression-libs

      - name: Update built-in CA certificates
        run: |
          curl -L -o common/file/ca-certificates.crt https://curl.se/ca/cacert.pem

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25'

      - name: Setup Android SDK
        if: ${{ matrix.goos == 'android' && matrix.cgo == true }}
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r29-beta4

      - name: Install Linux dependencies for CGO
        if: matrix.goos == 'linux' && matrix.cgo == true
        run: |
          sudo apt-get update
          sudo apt-get install -y liblzma-dev pkg-config libbrotli-dev

      - name: Install macOS dependencies for CGO
        if: matrix.goos == 'darwin' && matrix.cgo == true
        run: |
          brew install xz brotli

      - name: Setup MSYS2 for Windows x86_64
        if: matrix.goos == 'windows' && matrix.cgo == true && matrix.goarch == 'amd64' && matrix.compiler == 'mingw'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-xz
            mingw-w64-x86_64-brotli
            mingw-w64-x86_64-pkg-config

      - name: Setup MSYS2 for Windows ARM64 (Clang toolchain)
        if: matrix.goos == 'windows' && matrix.cgo == true && matrix.goarch == 'arm64' && matrix.compiler == 'mingw'
        uses: msys2/setup-msys2@v2
        with:
          msystem: CLANGARM64
          update: true
          install: >-
            mingw-w64-clang-aarch64-gcc
            mingw-w64-clang-aarch64-xz
            mingw-w64-clang-aarch64-brotli
            mingw-w64-clang-aarch64-zstd
            mingw-w64-clang-aarch64-pkg-config

      - name: Set Environment Variables
        shell: bash
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          if [ -z "${VERSION}" ]; then
            VERSION="dev"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "BUILDTIME=$(date)" >> $GITHUB_ENV

      - name: Set Environment Variables for Android
        if: ${{ matrix.goos == 'android' && matrix.cgo == true }}
        run: |
          ANDROID_NDK_ROOT="${{steps.setup-ndk.outputs.ndk-path}}"
          TOOLCHAIN="$ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64"
          TARGET="aarch64-linux-android35"
          
          echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT" >> $GITHUB_ENV
          echo "TOOLCHAIN=$TOOLCHAIN" >> $GITHUB_ENV
          echo "TARGET=$TARGET" >> $GITHUB_ENV
          echo "CC=$TOOLCHAIN/bin/$TARGET-clang" >> $GITHUB_ENV
          echo "CXX=$TOOLCHAIN/bin/$TARGET-clang++" >> $GITHUB_ENV
          echo "AR=$TOOLCHAIN/bin/llvm-ar" >> $GITHUB_ENV
          echo "RANLIB=$TOOLCHAIN/bin/llvm-ranlib" >> $GITHUB_ENV
          echo "STRIP=$TOOLCHAIN/bin/llvm-strip" >> $GITHUB_ENV

      - name: Set Environment Variables for Windows
        if: matrix.goos == 'windows' && matrix.cgo == true && matrix.compiler == 'mingw'
        shell: msys2 {0}
        run: |
          if [[ "${{ matrix.goarch }}" == "amd64" ]]; then
            GCC_PATH=$(which x86_64-w64-mingw32-gcc)
            GXX_PATH=$(which x86_64-w64-mingw32-g++)
          elif [[ "${{ matrix.goarch }}" == "arm64" ]]; then
            GCC_PATH=$(which aarch64-w64-mingw32-gcc)
            GXX_PATH=$(which aarch64-w64-mingw32-g++)
          fi
          GCC_WIN_PATH=$(cygpath -w "$GCC_PATH")
          GXX_WIN_PATH=$(cygpath -w "$GXX_PATH")

          if [[ "${{ matrix.goarch }}" == "amd64" ]]; then
            MINGW_ROOT=$(cygpath -w "/mingw64")
          elif [[ "${{ matrix.goarch }}" == "arm64" ]]; then
            MINGW_ROOT=$(cygpath -w "/clangarm64")
          fi
          echo "CC=$GCC_WIN_PATH" >> $GITHUB_ENV
          echo "CXX=$GXX_WIN_PATH" >> $GITHUB_ENV
          echo "CGO_CFLAGS=-I${MINGW_ROOT}/include" >> $GITHUB_ENV
          
          if [[ "${{ matrix.static }}" == "true" ]]; then
            echo "CGO_LDFLAGS=-L${MINGW_ROOT}/lib -Wl,-Bstatic -llzma -lzstd -Wl,-Bdynamic" >> $GITHUB_ENV
          else
            echo "CGO_LDFLAGS=-L${MINGW_ROOT}/lib -llzma -lbrotlidec -lbrotlicommon -lzstd" >> $GITHUB_ENV
          fi
          echo "CPATH=${MINGW_ROOT}/include" >> $GITHUB_ENV
          echo "LIBRARY_PATH=${MINGW_ROOT}/lib" >> $GITHUB_ENV
          echo "${MINGW_ROOT}/bin" >> $GITHUB_PATH

      - name: Build CGO version (Linux)
        if: matrix.cgo == true && matrix.goos == 'linux'
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOAMD64: ${{ matrix.goamd64 }}
          CGO_ENABLED: 1
        shell: bash
        run: |
          if [[ "${{ matrix.static }}" == "true" ]]; then
            CGO_CFLAGS="$(pkg-config --cflags liblzma)" \
            CGO_LDFLAGS="$(pkg-config --libs --static liblzma) -Wl,--allow-multiple-definition" \
            go build -tags="cgo_xz cgo_zstd pure_brotli" -a \
              -ldflags="-linkmode external -extldflags '-static' -s -w -X 'github.com/xishang0128/payload-dumper-go/constant.Version=${VERSION}' -X 'github.com/xishang0128/payload-dumper-go/constant.BuildTime=${BUILDTIME}'" \
              -o bin/${{ matrix.output }} ./cmd/payload-dumper
          else
            CGO_CFLAGS="$(pkg-config --cflags liblzma libbrotlidec)" \
            CGO_LDFLAGS="$(pkg-config --libs liblzma libbrotlidec)" \
            go build \
              -ldflags="-s -w -X 'github.com/xishang0128/payload-dumper-go/constant.Version=${VERSION}' -X 'github.com/xishang0128/payload-dumper-go/constant.BuildTime=${BUILDTIME}'" \
              -o bin/${{ matrix.output }} ./cmd/payload-dumper
          fi

      - name: Build CGO version (Darwin)
        if: matrix.goos == 'darwin' && matrix.cgo == true
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOAMD64: ${{ matrix.goamd64 }}
          CGO_ENABLED: 1
        shell: bash
        run: |
          if [[ "${{ matrix.static }}" == "true" ]]; then
            if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
              XZ_PREFIX="/opt/homebrew/opt/xz"
            else
              XZ_PREFIX="/usr/local/opt/xz"
            fi
            CGO_CFLAGS="-I$XZ_PREFIX/include" \
            CGO_LDFLAGS="$XZ_PREFIX/lib/liblzma.a -Wl,-search_paths_first" \
            go build -tags="cgo_xz cgo_zstd pure_brotli" \
              -a -ldflags="-s -w -X 'github.com/xishang0128/payload-dumper-go/constant.Version=${VERSION}' -X 'github.com/xishang0128/payload-dumper-go/constant.BuildTime=${BUILDTIME}'" \
              -o bin/${{ matrix.output }} ./cmd/payload-dumper
          else
            XZ_PREFIX="/opt/homebrew/opt/xz"
            BROTLI_PREFIX="/opt/homebrew/opt/brotli"
            CGO_CFLAGS="-I$XZ_PREFIX/include -I$BROTLI_PREFIX/include" \
            CGO_LDFLAGS="-L$XZ_PREFIX/lib -L$BROTLI_PREFIX/lib" \
            go build \
              -ldflags="-s -w -X 'github.com/xishang0128/payload-dumper-go/constant.Version=${VERSION}' -X 'github.com/xishang0128/payload-dumper-go/constant.BuildTime=${BUILDTIME}'" \
              -o bin/${{ matrix.output }} ./cmd/payload-dumper
          fi

      - name: Build CGO version (Windows MinGW)
        if: matrix.goos == 'windows' && matrix.cgo == true && matrix.compiler == 'mingw'
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOAMD64: ${{ matrix.goamd64 }}
          CGO_ENABLED: 1
        shell: bash
        run: |
          if [[ "${{ matrix.static }}" == "true" ]]; then
            go build -a \
              -ldflags="-linkmode external -extldflags '-static' -s -w -X 'github.com/xishang0128/payload-dumper-go/constant.Version=${VERSION}' -X 'github.com/xishang0128/payload-dumper-go/constant.BuildTime=${BUILDTIME}'" \
              -o bin/${{ matrix.output }}.exe ./cmd/payload-dumper
          else
            go build \
              -ldflags="-s -w -X 'github.com/xishang0128/payload-dumper-go/constant.Version=${VERSION}' -X 'github.com/xishang0128/payload-dumper-go/constant.BuildTime=${BUILDTIME}'" \
              -o bin/${{ matrix.output }}.exe ./cmd/payload-dumper
          fi

      - name: Build CGO version (Android)
        if: matrix.goos == 'android' && matrix.cgo == true
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOAMD64: ${{ matrix.goamd64 }}
          CGO_ENABLED: 1
        shell: bash
        run: |
          ANDROID_LIBS_DIR="$(pwd)/compression-libs"
          
          echo "Verifying required libraries..."
          MISSING_LIBS=()
          
          # Check header files
          if [[ ! -f "$ANDROID_LIBS_DIR/include/lzma.h" ]]; then
            MISSING_LIBS+=("lzma.h (XZ)")
          fi
          if [[ ! -f "$ANDROID_LIBS_DIR/include/brotli/decode.h" ]]; then
            MISSING_LIBS+=("brotli headers")
          fi
          if [[ ! -f "$ANDROID_LIBS_DIR/include/bzlib.h" ]]; then
            MISSING_LIBS+=("bzlib.h (bzip2)")
          fi
          if [[ ! -f "$ANDROID_LIBS_DIR/include/zstd.h" ]]; then
            MISSING_LIBS+=("zstd.h")
          fi
          
          # Check library files
          if [[ ! -f "$ANDROID_LIBS_DIR/lib/liblzma.so" ]]; then
            MISSING_LIBS+=("liblzma.so")
          fi
          if [[ ! -f "$ANDROID_LIBS_DIR/lib/libbrotlidec.so" ]]; then
            MISSING_LIBS+=("libbrotlidec.so")
          fi
          if [[ ! -f "$ANDROID_LIBS_DIR/lib/libzstd.so" ]]; then
            MISSING_LIBS+=("libzstd.so")
          fi
          
          if [[ ${#MISSING_LIBS[@]} -gt 0 ]]; then
            echo "❌ Missing required libraries:"
            for lib in "${MISSING_LIBS[@]}"; do
              echo "   - $lib"
            done
            echo ""
            echo "Please ensure all Android ARM64 libraries are compiled and placed in:"
            echo "  Headers: $ANDROID_LIBS_DIR/include/"
            echo "  Libraries: $ANDROID_LIBS_DIR/lib/"
            exit 1
          fi
          
          echo "✅ All required libraries found!"
          
          # Set CGO flags for Android ARM64 libraries
          CGO_CFLAGS="-I$ANDROID_LIBS_DIR/include"
          CGO_LDFLAGS="-L$ANDROID_LIBS_DIR/lib -llzma -lbrotlidec -lbrotlienc -lbrotlicommon -lbz2 -lzstd -Wl,-rpath,/data/data/com.termux/files/usr/lib"
          
          echo "📦 Building with CGO (Android ARM64 native libraries)..."
          CGO_CFLAGS="$CGO_CFLAGS" \
          CGO_LDFLAGS="$CGO_LDFLAGS" \
          go build \
            -a -ldflags="-s -w -linkmode external -extldflags '-Wl,-rpath,/data/data/com.termux/files/usr/lib' -X 'github.com/xishang0128/payload-dumper-go/constant.Version=${VERSION}' -X 'github.com/xishang0128/payload-dumper-go/constant.BuildTime=${BUILDTIME}'" \
            -o bin/${{ matrix.output }} ./cmd/payload-dumper

      - name: Build Pure Go version
        if: matrix.cgo == false
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOAMD64: ${{ matrix.goamd64 }}
          CGO_ENABLED: 0
        shell: bash
        run: |
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            go build \
              -ldflags="-s -w -X 'github.com/xishang0128/payload-dumper-go/constant.Version=${VERSION}' -X 'github.com/xishang0128/payload-dumper-go/constant.BuildTime=${BUILDTIME}'" \
              -o bin/${{ matrix.output }}.exe ./cmd/payload-dumper
          else
            go build \
              -ldflags="-s -w -X 'github.com/xishang0128/payload-dumper-go/constant.Version=${VERSION}' -X 'github.com/xishang0128/payload-dumper-go/constant.BuildTime=${BUILDTIME}'" \
              -o bin/${{ matrix.output }} ./cmd/payload-dumper
          fi

      - name: Create archive (Windows)
        if: matrix.goos == 'windows'
        shell: bash
        run: |
          cd bin
          7z a ${{ matrix.output }}.zip ${{ matrix.output }}.exe

      - name: Create archive (Unix)
        if: matrix.goos != 'windows'
        shell: bash
        run: |
          cd bin
          tar -czf ${{ matrix.output }}.tar.gz ${{ matrix.output }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.output }}
          path: |
            bin/*.zip
            bin/*.tar.gz
          retention-days: 30

  release:
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: bin/
          merge-multiple: true

      - name: Create Release
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            bin/*.zip
            bin/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pre-release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: bin/
          merge-multiple: true

      - name: Delete current release assets
        uses: 8Mi-Tech/delete-release-assets-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: pre-release
          deleteOnlyFromDrafts: false

      - name: Tag Repo
        uses: richardsimko/update-tag@v1
        with:
          tag_name: pre-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: pre-release
          files: |
            bin/*.zip
            bin/*.tar.gz
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}